// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DixaMessenger
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreText
import CryptoKit
import Foundation
import Network
import OSLog
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os


@objc @_inheritsConvenienceInitializers final public class Messenger : ObjectiveC.NSObject, Combine.ObservableObject {
  public static var shared: DixaMessenger.Messenger
  public static var pushNotification: DixaMessenger.RemoteNotification {
    get
  }
  public static func configure(_ config: DixaMessenger.DixaConfiguration)
  @objc public static func configureWith(messengerToken token: Swift.String, logLevel: Swift.UInt, pushEnvironment: Swift.UInt)
  @objc public static func configureWith(messengerToken token: Swift.String, logLevel: Swift.UInt)
  @objc public static func registerForPushNotification(deviceToken: Foundation.Data)
  public static func openMessenger() -> some SwiftUI.View
  
  @objc public static func openMessenger(from presentationController: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
  @objc public static func dismiss()
  @objc public static func unreadMessagesCountListener(completion: @escaping (_ count: Swift.Int) -> Swift.Void)
  @objc public static func updateUserCredentials(username: Swift.String, email: Swift.String)
  @objc public static func clearUserCredentials()
  @objc public static func verifyUser(with token: Swift.String)
  @objc public static func clearVerificationToken()
  @objc override dynamic public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}


extension UIKit.UIColor {
  public func image(ofSize size: CoreFoundation.CGSize = CGSize(width: 1, height: 1), cornerRadius: CoreFoundation.CGFloat = 0) -> UIKit.UIImage?
}
public enum LogLevel : Swift.UInt, Swift.Comparable {
  public static func < (lhs: DixaMessenger.LogLevel, rhs: DixaMessenger.LogLevel) -> Swift.Bool
  case none
  case error
  case warning
  case all
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public enum LogDestination {
  case OSLog
  case console
  public static func == (a: DixaMessenger.LogDestination, b: DixaMessenger.LogDestination) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct MessengerView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13DixaMessenger0B4ViewV4bodyQrvp", 0) __
}

extension UIKit.UIImage {
  public func resized(to target: CoreFoundation.CGSize) -> UIKit.UIImage
}

public struct Board : Swift.Decodable, Swift.Equatable {
  public typealias Id = Swift.String
  public static func == (a: DixaMessenger.Board, b: DixaMessenger.Board) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct BoardPath : Swift.Decodable, Swift.Equatable {
  public var url: Foundation.URL? {
    get
  }
  public static func == (a: DixaMessenger.BoardPath, b: DixaMessenger.BoardPath) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}


public struct AsyncFile<Content, Placeholder> : SwiftUI.View where Content : SwiftUI.View, Placeholder : SwiftUI.View {
  public init(url: Foundation.URL?, @SwiftUI.ViewBuilder content: @escaping () -> Content, @SwiftUI.ViewBuilder placeholder: @escaping () -> Placeholder, completion: @escaping (Foundation.Data) -> Swift.Void?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13DixaMessenger9AsyncFileV4bodyQrvp", 0) __<Content, Placeholder>
}

public enum BulletinError : Swift.Error, Swift.Equatable {
  case networkError(Foundation.NSError)
  case notFound
  case decodingFailed
  case noContent
  public static func == (a: DixaMessenger.BulletinError, b: DixaMessenger.BulletinError) -> Swift.Bool
}
public struct Bulletin : Swift.Equatable, Swift.Decodable, Swift.Identifiable, Swift.Hashable {
  public init(content: Swift.String, contentType: DixaMessenger.Bulletin.ContentType, order: Swift.Int, title: Swift.String, shouldDismiss _: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public var id: DixaMessenger.Bulletin.Id {
    get
  }
  public enum ContentType : Swift.String, Swift.Decodable {
    case text
    case link
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case content, contentType, order, title
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public typealias Id = Swift.Int
  public static func == (a: DixaMessenger.Bulletin, b: DixaMessenger.Bulletin) -> Swift.Bool
  public typealias ID = DixaMessenger.Bulletin.Id
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Bundle {
  public static var current: Foundation.Bundle {
    get
  }
}

public struct AsyncImage<Content, Placeholder> : SwiftUI.View where Content : SwiftUI.View, Placeholder : SwiftUI.View {
  public init(url: Foundation.URL?, shouldAuthorize: Swift.Bool?, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Image) -> Content, @SwiftUI.ViewBuilder placeholder: @escaping () -> Placeholder, completion: @escaping (UIKit.UIImage) -> Swift.Void?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13DixaMessenger10AsyncImageV4bodyQrvp", 0) __<Content, Placeholder>
}

extension Combine.Publishers {
  public struct EventLogger<Upstream> : Combine.Publisher where Upstream : Combine.Publisher {
    public typealias Output = Upstream.Output
    public typealias Failure = Upstream.Failure
    public init(upstream: Upstream, logMessage: Swift.String, logLevel: DixaMessenger.LogLevel)
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, Upstream.Failure == S.Failure, Upstream.Output == S.Input
  }
}


extension os.OSLog {
  public static let application: os.OSLog
}
public struct ShowMoreBulletinRow : SwiftUI.View {
  public init(title: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13DixaMessenger19ShowMoreBulletinRowV4bodyQrvp", 0) __
}





extension SwiftUI.View {
  public func roundedCorner(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func hideKeyboard()
}


public struct Article : Swift.Codable, Swift.Equatable {
  public static func == (a: DixaMessenger.Article, b: DixaMessenger.Article) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DixaMessenger.Article {
  public init(id: Swift.String, title: Swift.String)
}
public struct ArticleCategory : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DixaMessenger.ArticleCategory, b: DixaMessenger.ArticleCategory) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ArticleHighlights : Swift.Codable, Swift.Equatable {
  public static func == (a: DixaMessenger.ArticleHighlights, b: DixaMessenger.ArticleHighlights) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ArticleAuthor : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DixaMessenger.ArticleAuthor, b: DixaMessenger.ArticleAuthor) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Combine.Publisher where Self.Failure == Swift.Never {
  public func assignNoRetain<Root>(to keyPath: Swift.ReferenceWritableKeyPath<Root, Self.Output>, on object: Root) -> Combine.AnyCancellable where Root : AnyObject
}




public enum DixaColor {
}
extension UIKit.UIColor {
  public static func agentColor(for name: Swift.String) -> UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class BulletinBoardViewModel : Combine.ObservableObject {
  public func toggleShowMore()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RemoteNotification {
  final public func register(deviceToken token: Foundation.Data)
  final public func markNotifiationAsSeen()
  @objc deinit
}
extension DixaMessenger.RemoteNotification {
  final public func process(notification: UserNotifications.UNNotification, rootViewController: UIKit.UIViewController) -> Swift.Bool
}
extension DixaMessenger.RemoteNotification {
  final public func presentNotification(_ notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void) -> Swift.Bool
}
extension UIKit.UIFont {
  public static func dixaLight(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaLightItalic(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaRegular(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaRegularItalic(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaSemiBold(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaSemiBoldItalic(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaBold(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaBoldItalic(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaExtraBold(size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func dixaExtraBoldItalic(size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
extension SwiftUI.Font {
  public static func dixaLight(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaLightItalic(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaRegular(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaRegularItalic(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaSemiBold(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaSemiBoldItalic(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaBold(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaBoldItalic(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaExtraBold(size: CoreFoundation.CGFloat) -> SwiftUI.Font
  public static func dixaExtraBoldItalic(size: CoreFoundation.CGFloat) -> SwiftUI.Font
}
public struct APIError : Swift.Error {
  public init(_ data: Foundation.Data)
  public init(_ description: Swift.String)
}


extension Swift.Dictionary {
  public mutating func merge(contentsOf dictionary: [Key : Value])
  public func merging(contentsOf dictionary: [Key : Value]) -> [Key : Value]
}
public struct DixaConfiguration {
  public enum PushEnvironment : Swift.UInt {
    case production
    case sandbox
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public init(token: Swift.String, logLevel: DixaMessenger.LogLevel = .none, pushEnvironment: DixaMessenger.DixaConfiguration.PushEnvironment = .production)
  public init()
  public func apikey(_ token: Swift.String) -> DixaMessenger.DixaConfiguration
  public func logLevel(_ logLevel: DixaMessenger.LogLevel) -> DixaMessenger.DixaConfiguration
  public func supportedLanguages(_ languages: [Swift.String]) -> DixaMessenger.DixaConfiguration
  public func pushEnvironment(_ pushEnvironment: DixaMessenger.DixaConfiguration.PushEnvironment) -> DixaMessenger.DixaConfiguration
  public func backendEnvironment(_ env: Swift.String) -> DixaMessenger.DixaConfiguration
}

extension DixaMessenger.LogLevel : Swift.Hashable {}
extension DixaMessenger.LogLevel : Swift.RawRepresentable {}
extension DixaMessenger.LogDestination : Swift.Equatable {}
extension DixaMessenger.LogDestination : Swift.Hashable {}
extension DixaMessenger.Bulletin.ContentType : Swift.Equatable {}
extension DixaMessenger.Bulletin.ContentType : Swift.Hashable {}
extension DixaMessenger.Bulletin.ContentType : Swift.RawRepresentable {}
extension DixaMessenger.Bulletin.CodingKeys : Swift.Equatable {}
extension DixaMessenger.Bulletin.CodingKeys : Swift.Hashable {}
extension DixaMessenger.Bulletin.CodingKeys : Swift.RawRepresentable {}
extension DixaMessenger.DixaConfiguration.PushEnvironment : Swift.Equatable {}
extension DixaMessenger.DixaConfiguration.PushEnvironment : Swift.Hashable {}
extension DixaMessenger.DixaConfiguration.PushEnvironment : Swift.RawRepresentable {}
